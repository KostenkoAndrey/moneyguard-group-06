{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money Guard app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of transactions app"
  },
  "servers": [
    {
      "url": "https://moneyguard-group-06.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "User",
      "description": "User operations."
    },
    {
      "name": "Transactions",
      "description": "Operations about transactions."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create a new user",
        "operationId": "Signup",
        "description": "Create a new user",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's name",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email",
                    "example": "example@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password",
                    "example": "ExamplePassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/auth_400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "Login",
        "description": "Login user",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email",
                    "example": "example@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password",
                    "example": "ExamplePassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully login a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "token",
                        "user"
                      ],
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/auth_400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out user",
        "operationId": "Logout",
        "description": "Log out user by invalidating the token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged out!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get list of transactions",
        "operationId": "getTransactions",
        "description": "Get list of transactions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "type",
                "category",
                "sum",
                "comment",
                "date"
              ],
              "example": "_id"
            },
            "description": "Default value - _id"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            },
            "description": "Sorting order: \"asc\" for ascending, \"desc\" for descending"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "expenses"
              ],
              "example": "income"
            },
            "description": "Filter by transaction type"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "main expenses",
                "products",
                "car",
                "self care",
                "child care",
                "household products",
                "education",
                "leisure",
                "entertainment",
                "other expenses"
              ],
              "example": "main expenses"
            },
            "description": "Filter by transaction category"
          },
          {
            "in": "query",
            "name": "minSum",
            "schema": {
              "type": "number",
              "minimum": 0,
              "example": 0
            },
            "description": "Minimum transaction amount for filtering"
          },
          {
            "in": "query",
            "name": "maxSum",
            "schema": {
              "type": "number",
              "maximum": 1000000,
              "example": 10000
            },
            "description": "Maximum transaction amount for filtering"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transactions!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transactions!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/transactions"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 20
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 2
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/tx_404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create transaction",
        "operationId": "createTransaction",
        "description": "Create a transaction with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "category",
                  "sum",
                  "date"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "expenses",
                    "description": "Transaction's type"
                  },
                  "category": {
                    "type": "string",
                    "example": "products",
                    "description": "Transaction's category"
                  },
                  "sum": {
                    "type": "number",
                    "example": 888.88,
                    "description": "Transaction's amount"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Optional note about the transaction"
                  },
                  "date": {
                    "type": "string",
                    "example": "2020-02-20T00:00:00.000Z",
                    "description": "Creation date"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transactions"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/tx_post_400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/{id}": {
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Patch transaction by id",
        "operationId": "PatchTransactions",
        "description": "Patch transaction by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "expenses",
                    "description": "Transaction's type"
                  },
                  "category": {
                    "type": "string",
                    "example": "products",
                    "description": "Transaction's category"
                  },
                  "sum": {
                    "type": "number",
                    "example": 888.88,
                    "description": "Transaction's amount"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Optional note about the transaction"
                  },
                  "date": {
                    "type": "string",
                    "example": "2020-02-20T00:00:00.000Z",
                    "description": "Creation date"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transactions"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/tx_400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/tx_404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction by id",
        "operationId": "deleteTransaction",
        "description": "Delete transaction by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete transaction by id"
          },
          "400": {
            "$ref": "#/components/responses/tx_400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/tx_404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "example@gmail.com"
          },
          "balance": {
            "description": "User's balance",
            "type": "string",
            "example": 888.88
          }
        }
      },
      "transactions": {
        "type": "object",
        "required": [
          "_id",
          "type",
          "category",
          "sum",
          "date"
        ],
        "properties": {
          "_id": {
            "description": "Transaction's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "type": {
            "description": "Transaction's type",
            "type": "string",
            "enum": [
              "income",
              "expenses"
            ],
            "example": "expenses"
          },
          "category": {
            "description": "Transaction's category",
            "type": "string",
            "enum": [
              "income",
              "main expenses",
              "products",
              "car",
              "self care",
              "child care",
              "household products",
              "education",
              "leisure",
              "entertainment",
              "other expenses"
            ],
            "example": "products"
          },
          "sum": {
            "description": "Transaction's amount",
            "type": "number",
            "example": 888.88
          },
          "comment": {
            "description": "Transaction's comment",
            "type": "string",
            "example": "Some comments"
          },
          "date": {
            "description": "Creation date",
            "format": "date-time",
            "example": "2020-02-20T00:00:00.000Z"
          },
          "userId": {
            "type": "string",
            "description": "Parent's id",
            "example": "65e4decdd286b30065d54aw2"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong on the server"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "auth_400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "ValidationError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid email or password"
                    }
                  }
                }
              }
            },
            "example": {
              "status": 400,
              "message": "ValidationError",
              "data": {
                "message": "Bad Request"
              }
            }
          }
        }
      },
      "tx_404": {
        "description": "Transactions or collection not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Transaction or collection not found."
                }
              }
            }
          }
        }
      },
      "tx_post_400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "ValidationError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error creating contact."
                    }
                  }
                }
              }
            },
            "example": {
              "status": 400,
              "message": "Error creating contact.",
              "data": {
                "message": "Bad Request"
              }
            }
          }
        }
      },
      "tx_400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "ValidationError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid transaction ID."
                    }
                  }
                }
              }
            },
            "example": {
              "status": 400,
              "message": "Invalid transaction ID.",
              "data": {
                "message": "Bad Request"
              }
            }
          }
        }
      }
    }
  }
}